import pandas as pd
from pathlib import Path

def check_duplicates_file(file_path: str, show_report: bool = True) -> dict:
    """
    üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ñ–∞–π–ª (CSV, XLSX, JSON, Parquet) –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        show_report: –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é True)

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:
        {
            "total_rows": –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫,
            "duplicates_count": –ù–∞–π–¥–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏–∫–∞—Ç—ã,
            "removed_rows": –£–¥–∞–ª–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏,
            "remaining_rows": –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏,
            "has_duplicates": –û—Å—Ç–∞–ª–∏—Å—å –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç—ã
        }

    –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
        FileNotFoundError: –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        ValueError: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞
        pd.errors.EmptyDataError: –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π
    """
    try:
        path = Path(file_path)
        if not path.exists():
            raise FileNotFoundError(f"üö® –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∞ –∏ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        ext = path.suffix.lower()
        if ext == ".csv":
            df = pd.read_csv(file_path)
        elif ext == ".xlsx":
            df = pd.read_excel(file_path)
        elif ext == ".json":
            df = pd.read_json(file_path)
        elif ext == ".parquet":
            df = pd.read_parquet(file_path)
        else:
            raise ValueError(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {ext}")

        if df.empty:
            print("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –§–∞–π–ª –ø—É—Å—Ç–æ–π!")
            return {
                "total_rows": 0,
                "duplicates_count": 0,
                "removed_rows": 0,
                "remaining_rows": 0,
                "has_duplicates": False
            }

        # –ê–Ω–∞–ª–∏–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        duplicates = df[df.duplicated()]
        dup_count = len(duplicates)
        cleaned_df = df.drop_duplicates()
        removed = len(df) - len(cleaned_df)

        report = {
            "total_rows": len(df),
            "duplicates_count": dup_count,
            "removed_rows": removed,
            "remaining_rows": len(cleaned_df),
            "has_duplicates": cleaned_df.duplicated().any()
        }

        # –ö—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç
        if show_report:
            print("\n" + "‚ïê"*50)
            print("üîç –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–ö–ê–¢–û–í".center(50))
            print("‚ïê"*50)
            print(f"üìÅ –§–∞–π–ª: {path.name}")
            print(f"üìä –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: {report['total_rows']:>30}")
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {dup_count:>23}")
            print(f"üßπ –£–¥–∞–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {removed:>28}")
            print(f"‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {report['remaining_rows']:>22}")

            if dup_count > 0:
                print("\nüîé –ü—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
                print(duplicates.head(2).to_string(index=False))

            print("\n" + "‚ïê"*50)
            if dup_count == 0:
                print("üéâ –û—Ç–ª–∏—á–Ω–æ! –î—É–±–ª–∏–∫–∞—Ç–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
            else:
                print(f"üíæ –î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã")
            print("‚ïê"*50)

        return report

    except pd.errors.EmptyDataError:
        print("üö® –û—à–∏–±–∫–∞: –§–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
        raise
    except Exception as e:
        print(f"üö® –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise
