import pandas as pd
import numpy as np
from pathlib import Path

class MissingValuesAnalyzer:
    def __init__(self, data: pd.DataFrame, source_name: str = "DataFrame"):
        """üîç –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
        self.original_data = data.copy()
        self.source_name = source_name
        self.processed_data = None
        self.missing_stats = {}

    @staticmethod
    def from_file(file_path: str) -> 'MissingValuesAnalyzer':
        """
        üìÅ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .csv, .xlsx, .json, .parquet
        """
        path = Path(file_path)
        if not path.exists():
            raise FileNotFoundError(f"üö® –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

        ext = path.suffix.lower()
        if ext == ".csv":
            df = pd.read_csv(file_path)
        elif ext == ".xlsx":
            df = pd.read_excel(file_path)
        elif ext == ".json":
            df = pd.read_json(file_path)
        elif ext == ".parquet":
            df = pd.read_parquet(file_path)
        else:
            raise ValueError(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {ext}")

        return MissingValuesAnalyzer(df, source_name=path.name)

    def analyze(self) -> dict:
        """üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        stats = {}
        for col in self.original_data.columns:
            missing = self.original_data[col].isnull().sum()
            if missing > 0:
                stats[col] = {
                    'dtype': str(self.original_data[col].dtype),
                    'missing': missing,
                    'pct': round(missing / len(self.original_data) * 100, 2),
                    'suggested_strategy': self._suggest_strategy(col)
                }
        self.missing_stats = stats
        return stats

    def _suggest_strategy(self, col: str) -> str:
        """ü§ñ –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if pd.api.types.is_numeric_dtype(self.original_data[col]):
            return 'median' if self.original_data[col].skew() > 1 else 'mean'
        else:
            return 'mode' if len(self.original_data[col].unique()) < 20 else 'constant'

    def visualize_missing(self):
        """üìâ –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤"""
        if not self.missing_stats:
            print("üéâ –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
            return

        print("\n" + "‚ïê" * 60)
        print("üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–†–û–ü–£–©–ï–ù–ù–´–• –ó–ù–ê–ß–ï–ù–ò–ô".center(60))
        print(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {self.source_name}".center(60))
        print("‚ïê" * 60)

        for col, stat in self.missing_stats.items():
            print(f"\nüìå –°—Ç–æ–ª–±–µ—Ü: {col} ({stat['dtype']})")
            print(f"   ‚ñ™Ô∏è –ü—Ä–æ–ø—É—Å–∫–æ–≤: {stat['missing']} ({stat['pct']}%)")
            print(f"   üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {stat['suggested_strategy']}")

            # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if pd.api.types.is_numeric_dtype(self.original_data[col]):
                desc = self.original_data[col].describe()
                print(f"   üìê –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: min={desc['min']:.1f}, 25%={desc['25%']:.1f}, "
                      f"median={desc['50%']:.1f}, 75%={desc['75%']:.1f}, max={desc['max']:.1f}")

        print("\n" + "‚ïê" * 60)

    def process(self, strategies: dict = None) -> pd.DataFrame:
        """üõ†Ô∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º"""
        if not self.missing_stats:
            self.analyze()

        strategies = strategies or {
            'numeric': 'median',
            'categorical': 'mode'
        }

        df = self.original_data.copy()

        print(f"\nüõ†Ô∏è –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –ü–†–û–ü–£–°–ö–û–í –î–õ–Ø: {self.source_name}")
        for col in self.missing_stats.keys():
            strategy = self._get_strategy_for_column(col, strategies)
            df[col] = self._apply_strategy(df[col], strategy)
            print(f"   ‚úî {col}: {self._strategy_description(strategy)}")

        self.processed_data = df
        print("\n‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
        self._verify_processing()
        return df

    def _get_strategy_for_column(self, col: str, strategies: dict) -> str:
        """üìå –í—ã–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞"""
        if col in strategies:
            return strategies[col]
        return strategies['numeric' if pd.api.types.is_numeric_dtype(self.original_data[col]) else 'categorical']

    def _apply_strategy(self, series: pd.Series, strategy: str):
        """üîß –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if strategy == 'mean':
            return series.fillna(series.mean())
        elif strategy == 'median':
            return series.fillna(series.median())
        elif strategy == 'mode':
            return series.fillna(series.mode()[0])
        elif strategy == 'constant':
            return series.fillna('UNKNOWN' if series.dtype == 'object' else 0)
        elif strategy == 'drop':
            return series.dropna()
        else:
            raise ValueError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {strategy}")

    def _strategy_description(self, strategy: str) -> str:
        """üìù –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        descriptions = {
            'mean': '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏–º',
            'median': '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞–Ω–æ–π',
            'mode': '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–æ–π',
            'constant': '–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π',
            'drop': '—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫'
        }
        return descriptions.get(strategy, strategy)

    def _verify_processing(self):
        """üîç –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        total_before = self.original_data.isnull().sum().sum()
        total_after = self.processed_data.isnull().sum().sum()
        affected_columns = len(self.missing_stats)

        if total_after == 0:
            print("üéâ –í—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")
        else:
            print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {total_after} –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ {total_before}")

        print("\n" + "‚ïê" * 60)
        print("üßÆ –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò".center(60))
        print("‚ïê" * 60)
        print(f"üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: {self.source_name}")
        print(f"üß± –°—Ç—Ä–æ–∫: {len(self.original_data)} | –°—Ç–æ–ª–±—Ü–æ–≤ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏: {affected_columns}")
        print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–æ–≤ –î–û: {total_before}")
        print(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫–æ–≤ –ü–û–°–õ–ï: {total_after}")
        print("‚ïê" * 60)
