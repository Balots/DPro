from sklearn.preprocessing import StandardScaler
import pandas as pd
from pathlib import Path

class StandardizeData:
    def __init__(self, data: pd.DataFrame, columns: list = None, source_name: str = None):
        """
        ‚öôÔ∏è –ö–ª–∞—Å—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö (—Å—Ä–µ–¥–Ω–µ–µ = 0, std = 1)

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            data: DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏
            columns: —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –≤—Å–µ —á–∏—Å–ª–æ–≤—ã–µ)
            source_name: –∏–º—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        """
        self.data = data.copy()
        self.columns = columns if columns is not None else self._select_numeric_columns()
        self.source_name = source_name or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"
        self.before_stats = None
        self.after_stats = None
        self.result = None

    @staticmethod
    def from_file(file_path: str, columns: list = None) -> 'StandardizeData':
        """
        üìÅ –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä StandardizeData

        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .csv, .xlsx, .json, .parquet
        """
        path = Path(file_path)
        if not path.exists():
            raise FileNotFoundError(f"üö® –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

        ext = path.suffix.lower()
        if ext == ".csv":
            df = pd.read_csv(file_path)
        elif ext == ".xlsx":
            df = pd.read_excel(file_path)
        elif ext == ".json":
            df = pd.read_json(file_path)
        elif ext == ".parquet":
            df = pd.read_parquet(file_path)
        else:
            raise ValueError(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {ext}")

        return StandardizeData(df, columns=columns, source_name=path.name)

    def run(self) -> pd.DataFrame:
        """üöÄ –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—é"""
        df = self.data.copy()
        self.before_stats = df[self.columns].describe().T[['mean', 'std']]

        scaler = StandardScaler()
        df[self.columns] = scaler.fit_transform(df[self.columns])

        self.after_stats = df[self.columns].describe().T[['mean', 'std']]
        self.result = df
        return self.result

    def info(self) -> str:
        """üìã –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏"""
        info_str = (
            f"\n‚öôÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: '{self.source_name}'\n"
            f"üìä –°—Ç–æ–ª–±—Ü—ã –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏: {self.columns}\n"
            f"üéØ –¶–µ–ª—å: –ø—Ä–∏–≤–µ—Å—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∫ —Å—Ä–µ–¥–Ω–µ–º—É 0 –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—é 1\n"
            f"{'‚ïê'*60}\n"
        )

        if self.before_stats is not None and self.after_stats is not None:
            info_str += "üìâ –°—Ä–µ–¥–Ω–∏–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –î–û –∏ –ü–û–°–õ–ï:\n"
            for col in self.columns:
                before_mean = self.before_stats.loc[col, 'mean']
                before_std = self.before_stats.loc[col, 'std']
                after_mean = self.after_stats.loc[col, 'mean']
                after_std = self.after_stats.loc[col, 'std']
                info_str += (f"  ‚ñ™Ô∏è {col}: "
                             f"–¥–æ [Œº={before_mean:.2f}, œÉ={before_std:.2f}] ‚Üí "
                             f"–ø–æ—Å–ª–µ [Œº={after_mean:.2f}, œÉ={after_std:.2f}]\n")
            info_str += f"{'‚ïê'*60}\n"
        else:
            info_str += "‚ÑπÔ∏è –ó–∞–ø—É—Å—Ç–∏—Ç–µ .run() –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–æ/–ø–æ—Å–ª–µ.\n"

        return info_str

    def get_answ(self) -> pd.DataFrame:
        """üì§ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        if self.result is None:
            self.run()
        return self.result

    def _select_numeric_columns(self) -> list:
        """üîé –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã"""
        return self.data.select_dtypes(include=['number']).columns.tolist()
