# MainWindow.py (–¥–æ–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import sys
import pandas as pd
import numpy as np
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QPushButton, QLabel, QFileDialog, QTabWidget, QTextEdit, 
                             QComboBox, QLineEdit, QTableWidget, QTableWidgetItem, 
                             QStatusBar, QProgressBar, QAction, QToolBar, QGroupBox,
                             QCheckBox, QSpinBox, QDoubleSpinBox)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtPrintSupport import QPrinter
from PyQt5.QtGui import QPalette, QColor, QTextDocument
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure
from Detector.Detector import Detector
from DataProcessing import CleanData, HandleMissingValues, DetectAndRemoveOutliers, NormalizeData, StandardizeData
from TextProcessing import RemoveHTMLTags, RemoveSpecialChars, HandleNumbers, TokenizeText, RemoveStopwords, NormalizeText
import matplotlib.pyplot as plt

class TextProcessor:
    def __init__(self):
        self.operations = []
        
    def add_operation(self, operation_type, **params):
        self.operations.append({
            'type': operation_type,
            'params': params
        })
    
    def execute(self, input_text):
        current_text = input_text
        for op in self.operations:
            try:
                if op['type'] == 'remove_html':
                    current_text = RemoveHTMLTags(current_text).run()
                elif op['type'] == 'remove_special_chars':
                    current_text = RemoveSpecialChars(current_text).run()
                elif op['type'] == 'handle_numbers':
                    current_text = HandleNumbers(current_text, 
                                              strategy=op['params'].get('strategy', 'keep')).run()
                elif op['type'] == 'tokenize':
                    current_text = TokenizeText(current_text,
                                             token_type=op['params'].get('token_type', 'word'),
                                             lang=op['params'].get('lang', 'english')).run()
                elif op['type'] == 'remove_stopwords':
                    current_text = RemoveStopwords(current_text,
                                                lang=op['params'].get('lang', 'english')).run()
                elif op['type'] == 'normalize':
                    current_text = NormalizeText(current_text,
                                              method=op['params'].get('method', 'stem'),
                                              lang=op['params'].get('lang', 'english')).run()
            except Exception as e:
                print(f"Error in {op['type']}: {str(e)}")
        return current_text
    
class DataProcessingApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Data Processing Tool")
        self.setGeometry(100, 100, 1200, 800)
        self.current_data = None
        self.current_text = None
        self.history = []
        self.init_ui()
        self.setup_connections()

    def init_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏ layout
        main_widget = QWidget()
        main_layout = QVBoxLayout()
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_panel = QHBoxLayout()
        self.btn_load = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.btn_load_text = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç")  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        self.btn_save = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        self.btn_save.setEnabled(False)
        control_panel.addWidget(self.btn_load)
        control_panel.addWidget(self.btn_load_text)
        control_panel.addWidget(self.btn_save)
        
        # –¢–∞–±—ã
        self.tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.init_data_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
        self.init_analysis_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        self.init_clean_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        self.init_missing_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤
        self.init_outliers_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        self.init_text_processing_tab()
        
        # –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.log = QTextEdit()
        self.log.setReadOnly(True)
        
        # –°–±–æ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ layout
        main_layout.addLayout(control_panel)
        main_layout.addWidget(self.tabs)
        main_layout.addWidget(QLabel("–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:"))
        main_layout.addWidget(self.log)
        
        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.init_status_bar()
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.init_toolbar()

    def init_text_processing_tab(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        self.tab_text = QWidget()
        layout = QVBoxLayout()
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        self.text_display = QTextEdit()
        self.text_display.setReadOnly(True)
        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.cb_text_column = QComboBox()
        self.cb_text_column.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü")
        
        # –ì—Ä—É–ø–ø–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        clean_group = QGroupBox("–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞")
        clean_layout = QVBoxLayout()
        
        self.cb_remove_html = QCheckBox("–£–¥–∞–ª–∏—Ç—å HTML-—Ç–µ–≥–∏")
        self.cb_remove_html.setChecked(True)
        
        self.cb_remove_special = QCheckBox("–£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
        self.cb_remove_special.setChecked(True)
        
        self.cb_numbers_strategy = QComboBox()
        self.cb_numbers_strategy.addItems(["–û—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–∞", "–£–¥–∞–ª–∏—Ç—å —á–∏—Å–ª–∞"])
        
        clean_layout.addWidget(self.cb_remove_html)
        clean_layout.addWidget(self.cb_remove_special)
        clean_layout.addWidget(QLabel("–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–µ–ª:"))
        clean_layout.addWidget(self.cb_numbers_strategy)
        clean_group.setLayout(clean_layout)
        
        # –ì—Ä—É–ø–ø–∞ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏
        token_group = QGroupBox("–¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è")
        token_layout = QVBoxLayout()
        
        self.cb_tokenize = QComboBox()
        self.cb_tokenize.addItems(["–ù–µ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", "–ü–æ —Å–ª–æ–≤–∞–º", "–ü–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º"])
        
        self.cb_language = QComboBox()
        self.cb_language.addItems(["english", "russian", "german", "french", "spanish"])
        
        token_layout.addWidget(QLabel("–¢–∏–ø —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏:"))
        token_layout.addWidget(self.cb_tokenize)
        token_layout.addWidget(QLabel("–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞:"))
        token_layout.addWidget(self.cb_language)
        token_group.setLayout(token_layout)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        norm_group = QGroupBox("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è")
        norm_layout = QVBoxLayout()
        
        self.cb_remove_stopwords = QCheckBox("–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞")
        self.cb_remove_stopwords.setChecked(True)
        
        self.cb_normalization = QComboBox()
        self.cb_normalization.addItems(["–ù–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å", "–°—Ç–µ–º–º–∏–Ω–≥", "–õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è"])
        
        norm_layout.addWidget(self.cb_remove_stopwords)
        norm_layout.addWidget(QLabel("–ú–µ—Ç–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:"))
        norm_layout.addWidget(self.cb_normalization)
        norm_group.setLayout(norm_layout)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.btn_process_text = QPushButton("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç")
        
        # –°–±–æ—Ä–∫–∞ layout
        layout.addWidget(self.text_display)
        layout.addWidget(clean_group)
        layout.addWidget(token_group)
        layout.addWidget(norm_group)
        layout.addWidget(self.btn_process_text)
        layout.addStretch()
        
        self.tab_text.setLayout(layout)
        self.tabs.addTab(self.tab_text, "–¢–µ–∫—Å—Ç")

    def init_data_tab(self):
        self.tab_data = QWidget()
        self.data_table = QTableWidget()
        self.data_table.setEditTriggers(QTableWidget.NoEditTriggers)
        data_layout = QVBoxLayout()
        data_layout.addWidget(self.data_table)
        self.tab_data.setLayout(data_layout)
        self.tabs.addTab(self.tab_data, "–î–∞–Ω–Ω—ã–µ")

    def init_analysis_tab(self):
        self.tab_analyze = QWidget()
        layout = QVBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        btn_panel = QHBoxLayout()
        self.btn_analyze = QPushButton("üîç –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑")
        self.btn_plot_dist = QPushButton("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")
        btn_panel.addWidget(self.btn_analyze)
        btn_panel.addWidget(self.btn_plot_dist)
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
        self.figure = Figure()
        self.canvas = FigureCanvasQTAgg(self.figure)
        
        # –û—Ç—á—ë—Ç
        self.analysis_report = QTextEdit()
        self.analysis_report.setReadOnly(True)
        
        layout.addLayout(btn_panel)
        layout.addWidget(self.canvas)
        layout.addWidget(self.analysis_report)
        self.tab_analyze.setLayout(layout)
        self.tabs.addTab(self.tab_analyze, "–ê–Ω–∞–ª–∏–∑")

    def init_clean_tab(self):
        self.tab_clean = QWidget()
        self.btn_clean = QPushButton("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã")
        clean_layout = QVBoxLayout()
        clean_layout.addWidget(self.btn_clean)
        clean_layout.addStretch()
        self.tab_clean.setLayout(clean_layout)
        self.tabs.addTab(self.tab_clean, "–û—á–∏—Å—Ç–∫–∞")

    def init_missing_tab(self):
        self.tab_missing = QWidget()
        
        self.cb_num_strategy = QComboBox()
        self.cb_num_strategy.addItems(["mean", "median", "constant"])
        
        self.cb_cat_strategy = QComboBox()
        self.cb_cat_strategy.addItems(["mode", "constant"])
        
        self.le_fill_value = QLineEdit("NULL")
        self.le_fill_value.setPlaceholderText("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 'constant'")
        
        self.btn_process_missing = QPushButton("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏")
        
        missing_layout = QVBoxLayout()
        missing_layout.addWidget(QLabel("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —á–∏—Å–µ–ª:"))
        missing_layout.addWidget(self.cb_num_strategy)
        missing_layout.addWidget(QLabel("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:"))
        missing_layout.addWidget(self.cb_cat_strategy)
        missing_layout.addWidget(QLabel("–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"))
        missing_layout.addWidget(self.le_fill_value)
        missing_layout.addWidget(self.btn_process_missing)
        missing_layout.addStretch()
        
        self.tab_missing.setLayout(missing_layout)
        self.tabs.addTab(self.tab_missing, "–ü—Ä–æ–ø—É—Å–∫–∏")

    def init_outliers_tab(self):
        self.tab_outliers = QWidget()
        
        self.le_outlier_cols = QLineEdit()
        self.le_outlier_cols.setPlaceholderText("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        
        self.cb_outlier_method = QComboBox()
        self.cb_outlier_method.addItems(["IQR", "Hampel", "Percentile", "Skewness", "Kurtosis"])
        
        self.btn_remove_outliers = QPushButton("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã")
        
        outliers_layout = QVBoxLayout()
        outliers_layout.addWidget(QLabel("–°—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:"))
        outliers_layout.addWidget(self.le_outlier_cols)
        outliers_layout.addWidget(QLabel("–ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:"))
        outliers_layout.addWidget(self.cb_outlier_method)
        outliers_layout.addWidget(self.btn_remove_outliers)
        outliers_layout.addStretch()
        
        self.tab_outliers.setLayout(outliers_layout)
        self.tabs.addTab(self.tab_outliers, "–í—ã–±—Ä–æ—Å—ã")

    def init_status_bar(self):
        self.status_bar = QStatusBar()
        self.progress_bar = QProgressBar()
        self.progress_bar.setMaximumWidth(200)
        self.progress_bar.setVisible(False)
        self.status_bar.addPermanentWidget(self.progress_bar)
        self.setStatusBar(self.status_bar)

    def init_toolbar(self):
        toolbar = self.addToolBar("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        
        # –î–µ–π—Å—Ç–≤–∏—è
        export_action = QAction("–≠–∫—Å–ø–æ—Ä—Ç PDF", self)
        export_action.triggered.connect(self.export_report)
        
        undo_action = QAction("–û—Ç–º–µ–Ω–∏—Ç—å", self)
        undo_action.setShortcut("Ctrl+Z")
        undo_action.triggered.connect(self.undo)
        
        toolbar.addAction(export_action)
        toolbar.addAction(undo_action)

    def setup_connections(self):
        self.btn_load.clicked.connect(self.load_data)
        self.btn_save.clicked.connect(self.save_data)
        self.btn_load_text.clicked.connect(self.load_text_file)
        self.btn_clean.clicked.connect(self.clean_data)
        self.btn_process_missing.clicked.connect(self.process_missing)
        self.btn_remove_outliers.clicked.connect(self.remove_outliers)
        self.btn_analyze.clicked.connect(self.run_analysis)
        self.btn_plot_dist.clicked.connect(self.plot_distribution)
        self.btn_process_text.clicked.connect(self.process_text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö
        self.btn_load.clicked.connect(self.update_text_columns)

    def update_text_columns(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞"""
        if self.current_data is not None:
            self.cb_text_column.clear()
            self.cb_text_column.addItems(self.current_data.columns.tolist())

    def load_text_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", 
            "", 
            "Text Files (*.txt);;CSV Files (*.csv);;JSON Files (*.json)"
        )
        
        if file_path:
            try:
                if file_path.endswith('.txt'):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        self.current_text = f.read()
                elif file_path.endswith('.csv'):
                    self.current_text = pd.read_csv(file_path).to_string()
                elif file_path.endswith('.json'):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        self.current_text = str(json.load(f))
                
                self.text_display.setPlainText(self.current_text)
                self.btn_save.setEnabled(True)
                self.log_message(f"–¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {file_path}")
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞: {str(e)}", error=True)
                
    def process_text(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π"""
        if not self.current_text:
            return
            
        try:
            self.show_progress(True)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            processor = TextProcessor()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –õ–Æ–ë–û–ú –ø–æ—Ä—è–¥–∫–µ (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –ª–æ–≥–∏–∫–∞)
            if self.cb_remove_html.isChecked():
                processor.add_operation('remove_html')
                
            if self.cb_numbers_strategy.currentText() != "–û—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–∞":
                strategy = 'remove' if self.cb_numbers_strategy.currentText() == "–£–¥–∞–ª–∏—Ç—å —á–∏—Å–ª–∞" else 'replace'
                processor.add_operation('handle_numbers', strategy=strategy)
                
            if self.cb_remove_special.isChecked():
                processor.add_operation('remove_special_chars')
                
            if self.cb_tokenize.currentText() != "–ù–µ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å":
                token_type = 'word' if self.cb_tokenize.currentText() == "–ü–æ —Å–ª–æ–≤–∞–º" else 'sentence'
                processor.add_operation('tokenize', 
                                    token_type=token_type,
                                    lang=self.cb_language.currentText())
                
            if self.cb_remove_stopwords.isChecked():
                processor.add_operation('remove_stopwords',
                                    lang=self.cb_language.currentText())
                
            if self.cb_normalization.currentText() != "–ù–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å":
                method = 'stem' if self.cb_normalization.currentText() == "–°—Ç–µ–º–º–∏–Ω–≥" else 'lemmatize'
                processor.add_operation('normalize',
                                    method=method,
                                    lang=self.cb_language.currentText())
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            processed_result = processor.execute(str(self.current_text))
            
            # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç - —Å–ø–∏—Å–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏), —Å–æ–µ–¥–∏–Ω—è–µ–º –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É
            if isinstance(processed_result, list):
                processed_result = ' '.join(processed_result)
                
            self.current_text = processed_result
            self.text_display.setPlainText(self.current_text)
            self.log_message("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", error=True)
        finally:
            self.show_progress(False)
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    def load_data(self):
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–∞–Ω–Ω—ã—Ö", 
            "", 
            "CSV Files (*.csv);;Excel Files (*.xlsx);;JSON Files (*.json)"
        )
        if file_path:
            try:
                if file_path.endswith('.csv'):
                    self.current_data = pd.read_csv(file_path)
                elif file_path.endswith('.xlsx'):
                    self.current_data = pd.read_excel(file_path)
                elif file_path.endswith('.json'):
                    self.current_data = pd.read_json(file_path)
                
                self.display_data()
                self.btn_save.setEnabled(True)
                self.save_state()
                self.log_message(f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {file_path}")
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}", error=True)

    def save_data(self):
        if self.current_data is not None or self.current_text is not None:
            file_path, _ = QFileDialog.getSaveFileName(
                self, 
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 
                "", 
                "CSV Files (*.csv);;Text Files (*.txt);;JSON Files (*.json)"
            )
            if file_path:
                try:
                    if file_path.endswith('.csv') and self.current_data is not None:
                        self.current_data.to_csv(file_path, index=False)
                    elif file_path.endswith('.txt') and self.current_text is not None:
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(self.current_text if isinstance(self.current_text, str) 
                                  else '\n'.join(self.current_text))
                    elif file_path.endswith('.json') and self.current_data is not None:
                        self.current_data.to_json(file_path, indent=4)
                    
                    self.log_message(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
                except Exception as e:
                    self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}", error=True)

    def display_data(self):
        if self.current_data is not None:
            self.data_table.setRowCount(self.current_data.shape[0])
            self.data_table.setColumnCount(self.current_data.shape[1])
            self.data_table.setHorizontalHeaderLabels(self.current_data.columns)
            
            for row in range(self.current_data.shape[0]):
                for col in range(self.current_data.shape[1]):
                    item = QTableWidgetItem(str(self.current_data.iloc[row, col]))
                    item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                    self.data_table.setItem(row, col, item)

    def clean_data(self):
        if self.current_data is not None:
            try:
                self.show_progress(True)
                processor = CleanData(self.current_data)
                self.current_data = processor.run()
                self.display_data()
                self.save_state()
                self.log_message(processor.info())
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}", error=True)
            finally:
                self.show_progress(False)

    def process_missing(self):
        if self.current_data is not None:
            try:
                self.show_progress(True)
                fill_value = {col: self.le_fill_value.text() 
                             for col in self.current_data.columns}
                
                processor = HandleMissingValues(
                    self.current_data,
                    numeric_strategy=self.cb_num_strategy.currentText(),
                    categorical_strategy=self.cb_cat_strategy.currentText(),
                    fill_value=fill_value
                )
                self.current_data = processor.run()
                self.display_data()
                self.save_state()
                self.log_message(processor.info())
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {str(e)}", error=True)
            finally:
                self.show_progress(False)

    def remove_outliers(self):
        if self.current_data is not None:
            try:
                self.show_progress(True)
                columns = [col.strip() for col in self.le_outlier_cols.text().split(",")] if self.le_outlier_cols.text() else None
                
                processor = DetectAndRemoveOutliers(
                    self.current_data, 
                    columns=columns,
                    method=self.cb_outlier_method.currentText().lower()
                )
                self.current_data = processor.run()
                self.display_data()
                self.save_state()
                self.log_message(processor.info())
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤: {str(e)}", error=True)
            finally:
                self.show_progress(False)

    def run_analysis(self):
        if self.current_data is not None:
            try:
                self.show_progress(True)
                temp_file = "temp_analysis.csv"
                self.current_data.to_csv(temp_file, index=False)
                
                detector = Detector(
                    check_abnormal=True,
                    check_missing=True,
                    check_duplicates=True,
                    check_scaling=True
                )
                outcome, abnormal, scaling = detector.check_dataframe(temp_file)
                
                report = "=== –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö ===\n"
                report += f"–ü—Ä–æ–ø—É—Å–∫–∏: {outcome['Missing values/–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è']}\n"
                report += f"–î—É–±–ª–∏–∫–∞—Ç—ã: {outcome['Duplicate values/–î—É–±–ª–∏–∫–∞—Ç—ã –∑–Ω–∞—á–µ–Ω–∏–π ']}\n\n"
                report += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é:\n"
                for col, rec in scaling.items():
                    report += f"- {col}: {rec['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è']} ({', '.join(rec['–ø—Ä–∏—á–∏–Ω–∞'])})\n"
                
                self.analysis_report.setPlainText(report)
                self.plot_distribution()
                self.log_message("–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}", error=True)
            finally:
                self.show_progress(False)

    def plot_distribution(self):
        if self.current_data is not None:
            self.figure.clear()
            ax = self.figure.add_subplot(111)
            
            numeric_cols = self.current_data.select_dtypes(include=['number']).columns
            if len(numeric_cols) > 0:
                col = numeric_cols[0]
                self.current_data[col].plot(kind='hist', ax=ax)
                ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col}")
                self.canvas.draw()

    def save_state(self):
        if self.current_data is not None:
            self.history.append(self.current_data.copy())
            if len(self.history) > 10:
                self.history.pop(0)

    def undo(self):
        if len(self.history) > 1:
            self.history.pop()
            self.current_data = self.history[-1].copy()
            self.display_data()
            self.log_message("–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

    def export_report(self):
        path, _ = QFileDialog.getSaveFileName(self, "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞", "", "PDF Files (*.pdf)")
        if path:
            printer = QPrinter(QPrinter.HighResolution)
            printer.setOutputFormat(QPrinter.PdfFormat)
            printer.setOutputFileName(path)
            
            doc = QTextDocument()
            doc.setPlainText(self.analysis_report.toPlainText())
            doc.print_(printer)
            self.log_message(f"–û—Ç—á—ë—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {path}")

    def show_progress(self, visible):
        self.progress_bar.setVisible(visible)
        self.progress_bar.setRange(0, 0 if visible else 1)  # –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        QApplication.processEvents()

    def log_message(self, message, error=False):
        if error:
            self.log.append(f"<font color='red'>{message}</font>")
        else:
            self.log.append(message)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
    app.setStyle('Fusion')
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor(53, 53, 53))
    palette.setColor(QPalette.WindowText, Qt.white)
    app.setPalette(palette)
    
    window = DataProcessingApp()
    window.show()
    sys.exit(app.exec_())