from Detector.textDetector import TextDetector
import sys
import nltk
import pandas as pd
import numpy as np
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                             QPushButton, QLabel, QFileDialog, QTabWidget, QTextEdit, 
                             QComboBox, QLineEdit, QSplitter, QTableWidget, QTableWidgetItem, 
                             QStatusBar, QProgressBar, QAction, QToolBar, QGroupBox,
                             QCheckBox, QButtonGroup, QSpinBox, QDoubleSpinBox, QRadioButton)
from PyQt5.QtGui import QPalette, QColor, QTextDocument, QDoubleValidator
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtPrintSupport import QPrinter
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure
from Detector.Detector import Detector
from DataProcessing import CleanData, HandleMissingValues, DetectAndRemoveOutliers, NormalizeData, StandardizeData
from TextProcessing import RemoveHTMLTags, RemoveSpecialChars, HandleNumbers, TokenizeText, RemoveStopwords, NormalizeText
import matplotlib.pyplot as plt


class TextProcessor:
    def __init__(self):
        self.operations = []
        
    def add_operation(self, operation_type, **params):
        self.operations.append({
            'type': operation_type,
            'params': params
        })
    
    def execute(self, input_text):
        current_text = input_text
        for operation in self.operations:
            try:
                print(f"Applying operation: {operation['type']}")
                
                if operation['type'] == 'remove_html':
                    current_text = RemoveHTMLTags(current_text).run()
                elif operation['type'] == 'remove_special_chars':
                    current_text = RemoveSpecialChars(current_text).run()
                elif operation['type'] == 'handle_numbers':
                    current_text = HandleNumbers(current_text, 
                                              strategy=operation['params'].get('strategy', 'keep')).run()
                elif operation['type'] == 'tokenize':
                    token_type_val = 'word' if operation['params'].get('token_type', '–ü–æ —Å–ª–æ–≤–∞–º') == '–ü–æ —Å–ª–æ–≤–∞–º' else 'sentence'
                    current_text = TokenizeText(current_text, 
                                             token_type=token_type_val,
                                             lang=operation['params']['lang']).run()
                elif operation['type'] == 'remove_stopwords':
                    current_text = RemoveStopwords(current_text,
                                                lang=operation['params']['lang']).run()
                elif operation['type'] == 'normalize':
                    current_text = NormalizeText(current_text,
                                              method=operation['params'].get('method', 'stem'),
                                              lang=operation['params']['lang']).run()
                
                print(f"Result after {operation['type']}: {str(current_text)[:100]}...")
            except Exception as e:
                print(f"Error in {operation['type']}: {str(e)}")
        return current_text
    
class DataProcessingApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Data Processing Tool")
        self.setGeometry(100, 100, 1200, 800)
        self.current_data = None
        self.current_text = None
        self.history = []
        self.init_ui()
        self.setup_connections()

    def init_ui(self):
        # –ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏ layout
        main_widget = QWidget()
        main_layout = QVBoxLayout()
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏–∫–æ–Ω–∫–∞–º–∏
        control_panel = QHBoxLayout()
        self.btn_load = QPushButton("üìä –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        self.btn_load_text = QPushButton("üìù –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç")
        self.btn_save = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
        self.btn_save.setEnabled(False)
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫–∏
        self.btn_load.setToolTip("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (CSV, Excel, JSON)")
        self.btn_load_text.setToolTip("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (TXT, CSV, JSON)")
        self.btn_save.setToolTip("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç")
        control_panel.addWidget(self.btn_load)
        control_panel.addWidget(self.btn_load_text)
        control_panel.addWidget(self.btn_save)
        
        # –¢–∞–±—ã
        self.tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.init_data_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)

        self.init_analysis_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        self.init_clean_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–ø—É—Å–∫–æ–≤
        self.init_missing_tab()
        
        # –í–∫–ª–∞–¥–∫–∞ –≤—ã–±—Ä–æ—Å–æ–≤
        self.init_outliers_tab()

        self.init_text_processing_tab()

        
        # –í–∫–ª–∞–¥–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        self.init_scaling_tab()

        # –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π
        self.log = QTextEdit()
        self.log.setReadOnly(True)
        self.log.setMaximumHeight(100)
        
        # –°–±–æ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ layout
        main_layout.addLayout(control_panel)
        main_layout.addWidget(self.tabs)
        main_layout.addWidget(QLabel("–õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π:"))
        main_layout.addWidget(self.log)
        
        main_widget.setLayout(main_layout)
        self.setCentralWidget(main_widget)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.init_status_bar()
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
        self.init_toolbar()

    def init_text_processing_tab(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º"""
        self.tab_text = QWidget()
        main_layout = QVBoxLayout(self.tab_text)
        
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π)
        main_splitter = QSplitter(Qt.Vertical)
        
        # 1. –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å - —Ç–µ–∫—Å—Ç –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        top_widget = QWidget()
        top_layout = QVBoxLayout(top_widget)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        text_group = QGroupBox("–¢–µ–∫—Å—Ç")
        text_layout = QVBoxLayout()
        self.text_display = QTextEdit()
        self.text_display.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª...")
        text_layout.addWidget(self.text_display)
        text_group.setLayout(text_layout)
        top_layout.addWidget(text_group)
        
        # –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        settings_layout = QHBoxLayout()
        
        # –ö–æ–ª–æ–Ω–∫–∞ 1: –û—á–∏—Å—Ç–∫–∞
        clean_group = QGroupBox("–û—á–∏—Å—Ç–∫–∞")
        clean_layout = QVBoxLayout()
        self.cb_remove_html = QCheckBox("–£–¥–∞–ª–∏—Ç—å HTML-—Ç–µ–≥–∏")
        self.cb_remove_special = QCheckBox("–£–¥–∞–ª–∏—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã")
        self.cb_numbers_strategy = QComboBox()
        self.cb_numbers_strategy.addItems(["–û—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–∞", "–£–¥–∞–ª–∏—Ç—å —á–∏—Å–ª–∞", "–ó–∞–º–µ–Ω–∏—Ç—å —á–∏—Å–ª–∞"])
        clean_layout.addWidget(self.cb_remove_html)
        clean_layout.addWidget(self.cb_remove_special)
        clean_layout.addWidget(QLabel("–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∏—Å–µ–ª:"))
        clean_layout.addWidget(self.cb_numbers_strategy)
        clean_group.setLayout(clean_layout)
        
        # –ö–æ–ª–æ–Ω–∫–∞ 2: –¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è
        token_group = QGroupBox("–¢–æ–∫–µ–Ω–∏–∑–∞—Ü–∏—è")
        token_layout = QVBoxLayout()
        self.cb_tokenize = QComboBox()
        self.cb_tokenize.addItems(["–ù–µ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å", "–ü–æ —Å–ª–æ–≤–∞–º", "–ü–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º"])
        self.cb_language = QComboBox()
        self.cb_language.addItems(["english", "russian", "german", "french", "spanish"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
        self.cb_task_type = QComboBox()
        self.cb_task_type.addItems([
            "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
            "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏", 
            "–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏",
            "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π",
            "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è",
            "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è",
            "–ú–∞—à–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥",
            "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
        ])
        
        token_layout.addWidget(QLabel("–¢–∏–ø —Ç–æ–∫–µ–Ω–∏–∑–∞—Ü–∏–∏:"))
        token_layout.addWidget(self.cb_tokenize)
        token_layout.addWidget(QLabel("–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞:"))
        token_layout.addWidget(self.cb_language)
        token_layout.addWidget(QLabel("–¢–∏–ø NLP –∑–∞–¥–∞—á–∏:"))
        token_layout.addWidget(self.cb_task_type)
        token_group.setLayout(token_layout)
        
        # –ö–æ–ª–æ–Ω–∫–∞ 3: –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
        norm_group = QGroupBox("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è")
        norm_layout = QVBoxLayout()
        self.cb_remove_stopwords = QCheckBox("–£–¥–∞–ª–∏—Ç—å —Å—Ç–æ–ø-—Å–ª–æ–≤–∞")
        self.cb_normalization = QComboBox()
        self.cb_normalization.addItems(["–ù–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å", "–°—Ç–µ–º–º–∏–Ω–≥", "–õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è"])
        norm_layout.addWidget(self.cb_remove_stopwords)
        norm_layout.addWidget(QLabel("–ú–µ—Ç–æ–¥ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:"))
        norm_layout.addWidget(self.cb_normalization)
        norm_group.setLayout(norm_layout)
        
        settings_layout.addWidget(clean_group)
        settings_layout.addWidget(token_group)
        settings_layout.addWidget(norm_group)
        settings_group.setLayout(settings_layout)
        top_layout.addWidget(settings_group)
        
        # –ö–Ω–æ–ø–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        button_layout = QHBoxLayout()
        self.btn_process_text = QPushButton("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç")
        self.btn_analyze_text = QPushButton("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç")
        button_layout.addWidget(self.btn_process_text)
        button_layout.addWidget(self.btn_analyze_text)
        top_layout.addLayout(button_layout)
        
        # 2. –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å - —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
        bottom_widget = QWidget()
        bottom_layout = QVBoxLayout(bottom_widget)
        
        analysis_group = QGroupBox("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞")
        analysis_layout = QVBoxLayout()
        self.text_analysis_display = QTextEdit()
        self.text_analysis_display.setReadOnly(True)
        self.text_analysis_display.setStyleSheet("""
            QTextEdit {
                background-color: #f8f8f8;
                border: 1px solid #d0d0d0;
                border-radius: 4px;
                padding: 8px;
            }
        """)
        analysis_layout.addWidget(self.text_analysis_display)
        analysis_group.setLayout(analysis_layout)
        bottom_layout.addWidget(analysis_group)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        main_splitter.addWidget(top_widget)
        main_splitter.addWidget(bottom_widget)
        main_splitter.setSizes([500, 300])  # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –æ–±–ª–∞—Å—Ç–µ–π
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –≤ –≥–ª–∞–≤–Ω—ã–π layout
        main_layout.addWidget(main_splitter)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ
        main_layout.setStretchFactor(main_splitter, 1)
        
        self.tabs.addTab(self.tab_text, "üìù –¢–µ–∫—Å—Ç")

    def init_data_tab(self):
        self.tab_data = QWidget()
        self.data_table = QTableWidget()
        self.data_table.setEditTriggers(QTableWidget.NoEditTriggers)

        
        # –£–ª—É—á—à–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.data_table.setAlternatingRowColors(True)
        self.data_table.setStyleSheet("""
            QTableWidget {
                gridline-color: #d0d0d0;
                alternate-background-color: #f8f8f8;
            }
            QHeaderView::section {
                background-color: #e0e0e0;
                padding: 4px;
                border: 1px solid #c0c0c0;
            }
        """)
        
        data_layout = QVBoxLayout(self.tab_data)
        data_layout.addWidget(self.data_table)
        self.tab_data.setLayout(data_layout)
        self.tabs.addTab(self.tab_data, "üìä –î–∞–Ω–Ω—ã–µ")

    def init_analysis_tab(self):
        self.tab_analyze = QWidget()
        layout = QVBoxLayout(self.tab_analyze)
        # –ö–Ω–æ–ø–∫–∏ –∞–Ω–∞–ª–∏–∑–∞
        btn_panel = QHBoxLayout()
        self.btn_analyze = QPushButton("üîç –ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑")
        self.btn_plot_dist = QPushButton("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ")

        self.btn_analyze.setToolTip("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        self.btn_plot_dist.setToolTip("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")

        btn_panel.addWidget(self.btn_analyze)
        btn_panel.addWidget(self.btn_plot_dist)
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å
        self.figure = Figure()
        self.canvas = FigureCanvasQTAgg(self.figure)

        self.canvas.setMinimumHeight(300)
        
        # –û—Ç—á—ë—Ç
        self.analysis_report = QTextEdit()
        self.analysis_report.setReadOnly(True)

        self.analysis_report.setStyleSheet("""
            QTextEdit {
                background-color: #f5f5f5;
                border: 1px solid #d0d0d0;
                border-radius: 5px;
                padding: 10px;
            }
        """)
        
        layout.addLayout(btn_panel)
        layout.addWidget(self.canvas)
        layout.addWidget(QLabel("–û—Ç—á—ë—Ç –∞–Ω–∞–ª–∏–∑–∞:"))
        layout.addWidget(self.analysis_report)
        self.tab_analyze.setLayout(layout)
        self.tabs.addTab(self.tab_analyze, "üìà –ê–Ω–∞–ª–∏–∑")
        layout.addLayout(btn_panel)
        layout.addWidget(self.canvas)
        layout.addWidget(self.analysis_report)
        
        self.tabs.addTab(self.tab_analyze, "–ê–Ω–∞–ª–∏–∑")

    def init_clean_tab(self):
        self.tab_clean = QWidget()
        self.btn_clean = QPushButton("–£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã")
        clean_layout = QVBoxLayout()
        clean_layout.addWidget(self.btn_clean)
        clean_layout.addStretch()
        self.tab_clean.setLayout(clean_layout)

        self.tabs.addTab(self.tab_clean, "üßπ–û—á–∏—Å—Ç–∫–∞")


    def init_missing_tab(self):
        self.tab_missing = QWidget()
        
        self.cb_num_strategy = QComboBox()
        self.cb_num_strategy.addItems(["mean", "median", "constant"])
        
        self.cb_cat_strategy = QComboBox()
        self.cb_cat_strategy.addItems(["mode", "constant"])
        
        self.le_fill_value = QLineEdit("NULL")
        self.le_fill_value.setPlaceholderText("–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è 'constant'")
        
        self.btn_process_missing = QPushButton("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–æ–ø—É—Å–∫–∏")
        
        missing_layout = QVBoxLayout()
        missing_layout.addWidget(QLabel("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —á–∏—Å–µ–ª:"))
        missing_layout.addWidget(self.cb_num_strategy)
        missing_layout.addWidget(QLabel("–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:"))
        missing_layout.addWidget(self.cb_cat_strategy)
        missing_layout.addWidget(QLabel("–ö–∞—Å—Ç–æ–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"))
        missing_layout.addWidget(self.le_fill_value)
        missing_layout.addWidget(self.btn_process_missing)
        missing_layout.addStretch()
        
        self.tab_missing.setLayout(missing_layout)

        self.tabs.addTab(self.tab_missing, "‚ùì–ü—Ä–æ–ø—É—Å–∫–∏")


    def init_outliers_tab(self):
        self.tab_outliers = QWidget()
        
        self.le_outlier_cols = QLineEdit()
        self.le_outlier_cols.setPlaceholderText("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é")
        
        self.cb_outlier_method = QComboBox()
        self.cb_outlier_method.addItems(["IQR", "Hampel", "Percentile", "Skewness", "Kurtosis"])
        
        self.btn_remove_outliers = QPushButton("–£–¥–∞–ª–∏—Ç—å –≤—ã–±—Ä–æ—Å—ã")
        
        outliers_layout = QVBoxLayout()
        outliers_layout.addWidget(QLabel("–°—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:"))
        outliers_layout.addWidget(self.le_outlier_cols)
        outliers_layout.addWidget(QLabel("–ú–µ—Ç–æ–¥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è:"))
        outliers_layout.addWidget(self.cb_outlier_method)
        outliers_layout.addWidget(self.btn_remove_outliers)
        outliers_layout.addStretch()
        
        self.tab_outliers.setLayout(outliers_layout)

        self.tabs.addTab(self.tab_outliers, "üìà–í—ã–±—Ä–æ—Å—ã")

    def init_status_bar(self):
        self.status_bar = QStatusBar()
        self.progress_bar = QProgressBar()
        self.progress_bar.setMaximumWidth(200)
        self.progress_bar.setVisible(False)
        self.status_bar.addPermanentWidget(self.progress_bar)
        self.setStatusBar(self.status_bar)

    def init_toolbar(self):
        toolbar = self.addToolBar("–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        
        # –î–µ–π—Å—Ç–≤–∏—è
        export_action = QAction("–≠–∫—Å–ø–æ—Ä—Ç PDF", self)
        export_action.triggered.connect(self.export_report)
        
        undo_action = QAction("–û—Ç–º–µ–Ω–∏—Ç—å", self)
        undo_action.setShortcut("Ctrl+Z")
        undo_action.triggered.connect(self.undo)
        
        toolbar.addAction(export_action)
        toolbar.addAction(undo_action)

    def setup_connections(self):
        self.btn_load.clicked.connect(self.load_data)
        self.btn_save.clicked.connect(self.save_data)

        self.btn_load_text.clicked.connect(self.load_text_file)

        self.btn_clean.clicked.connect(self.clean_data)
        self.btn_process_missing.clicked.connect(self.process_missing)
        self.btn_remove_outliers.clicked.connect(self.remove_outliers)
        self.btn_analyze.clicked.connect(self.run_analysis)
        self.btn_plot_dist.clicked.connect(self.plot_distribution)

        self.btn_process_text.clicked.connect(self.process_text)
        self.btn_analyze_text.clicked.connect(self.analyze_text_data)


    def auto_detect_language(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
        if not self.current_text:
            return
            
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º TextDetector –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
            detector = TextDetector()
            detected_lang = detector._detect_language(self.current_text)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —è–∑—ã–∫ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ
            lang_mapping = {
                'english': 'english',
                'russian': 'russian',
                'german': 'german',
                'french': 'french',
                'spanish': 'spanish'
            }
            
            # –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫ –µ—Å—Ç—å –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
            if detected_lang in lang_mapping.values():
                index = self.cb_language.findText(detected_lang)
                if index >= 0:
                    self.cb_language.setCurrentIndex(index)
                    self.log_message(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {detected_lang}")
            else:
                self.log_message(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω —è–∑—ã–∫: {detected_lang}, –Ω–æ –æ–Ω –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è")
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞: {str(e)}")

    def load_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        if self.current_data is not None or self.current_text is not None:
            file_path, selected_filter = QFileDialog.getSaveFileName(
                self, 
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 
                "", 
                "Text Files (*.txt);;CSV Files (*.csv);;Excel Files (*.xlsx);;JSON Files (*.json);;All Files (*)"
            )
            
            if not file_path:
                return
                
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                ext_map = {
                    'Text Files (*.txt)': '.txt',
                    'CSV Files (*.csv)': '.csv',
                    'Excel Files (*.xlsx)': '.xlsx',
                    'JSON Files (*.json)': '.json'
                }
                
                if selected_filter in ext_map and not file_path.endswith(ext_map[selected_filter]):
                    file_path += ext_map[selected_filter]
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if self.current_data is not None and file_path.endswith(('.csv', '.xlsx', '.json')):
                    if file_path.endswith('.csv'):
                        self.current_data.to_csv(file_path, index=False, encoding='utf-8')
                    elif file_path.endswith('.xlsx'):
                        self.current_data.to_excel(file_path, index=False)
                    elif file_path.endswith('.json'):
                        self.current_data.to_json(file_path, orient='records', indent=2, force_ascii=False)
                    self.log_message(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                elif self.current_text is not None:
                    if file_path.endswith('.txt'):
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(self.current_text)
                    elif file_path.endswith('.csv'):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ CSV —Å –æ–¥–Ω–æ–π –∫–æ–ª–æ–Ω–∫–æ–π
                        lines = self.current_text.split('\n')
                        pd.DataFrame({'text': lines}).to_csv(file_path, index=False, encoding='utf-8')
                    elif file_path.endswith('.json'):
                        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ JSON, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ
                        try:
                            data = json.loads(self.current_text)
                            with open(file_path, 'w', encoding='utf-8') as f:
                                json.dump(data, f, indent=2, ensure_ascii=False)
                        except:
                            # –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ
                            with open(file_path, 'w', encoding='utf-8') as f:
                                json.dump({'content': self.current_text}, f, indent=2, ensure_ascii=False)
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(self.current_text)
                    
                    self.log_message(f"–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
                    
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}", error=True)

    def process_text(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        if not self.current_text:
            self.log_message("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", error=True)
            return
            
        try:
            self.show_progress(True)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            original_text = self.current_text
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            selected_lang = self.cb_language.currentText()
            
            # –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            task_type_mapping = {
                "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ": "unknown",
                "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏": "spelling",
                "–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏": "sentiment",
                "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π": "ner",
                "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è": "summarization",
                "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è": "clustering",
                "–ú–∞—à–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥": "translation",
                "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã": "question_answering"
            }
            selected_task_type = task_type_mapping.get(self.cb_task_type.currentText(), "unknown")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            processor = TextProcessor()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
            if self.cb_remove_html.isChecked():
                processor.add_operation('remove_html')
                
            if self.cb_remove_special.isChecked():
                processor.add_operation('remove_special_chars')
                
            if self.cb_numbers_strategy.currentText() != "–û—Å—Ç–∞–≤–∏—Ç—å —á–∏—Å–ª–∞":
                strategy = 'remove' if self.cb_numbers_strategy.currentText() == "–£–¥–∞–ª–∏—Ç—å —á–∏—Å–ª–∞" else 'replace'
                processor.add_operation('handle_numbers', strategy=strategy)
                
            if self.cb_tokenize.currentText() != "–ù–µ —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å":
                token_type = self.cb_tokenize.currentText()  # "–ü–æ —Å–ª–æ–≤–∞–º" –∏–ª–∏ "–ü–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º"
                processor.add_operation('tokenize', 
                                    token_type=token_type,
                                    lang=selected_lang)
                
            if self.cb_remove_stopwords.isChecked():
                processor.add_operation('remove_stopwords',
                                    lang=selected_lang)
                
            if self.cb_normalization.currentText() != "–ù–µ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å":
                method = 'stem' if self.cb_normalization.currentText() == "–°—Ç–µ–º–º–∏–Ω–≥" else 'lemmatize'
                processor.add_operation('normalize',
                                    method=method,
                                    lang=selected_lang)
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
            processed_result = processor.execute(str(self.current_text))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
            self.current_text = processed_result
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if isinstance(processed_result, (list, pd.Series)):
                # –î–ª—è —Ç–æ–∫–µ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–µ–ª–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                display_text = "\n".join([f"- {token}" for token in processed_result]) if isinstance(processed_result, list) else processed_result.to_string()
                self.text_display.setPlainText(display_text)
            else:
                self.text_display.setPlainText(str(self.current_text))
                
            self.log_message("–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.history.append({
                'original': original_text,
                'processed': self.current_text
            })
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", error=True)
        finally:
            self.show_progress(False)

    # –ù–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞
    def analyze_text_data(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏"""
        if not self.current_text:
            self.log_message("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", error=True)
            return
        
        try:
            self.show_progress(True)
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            selected_lang = self.cb_language.currentText()
            
            # –ú–∞–ø–ø–∏–Ω–≥ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è TextDetector
            task_type_mapping = {
                "–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ": "unknown",
                "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏": "spelling",
                "–ê–Ω–∞–ª–∏–∑ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏": "sentiment",
                "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π": "ner",
                "–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è": "summarization",
                "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è": "clustering",
                "–ú–∞—à–∏–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥": "translation",
                "–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã": "question_answering"
            }
            selected_task_type = task_type_mapping.get(self.cb_task_type.currentText(), "unknown")
            
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏
            analyzer = TextDetector(lang=selected_lang, task_type=selected_task_type)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
            analysis_result = analyzer.analyze_text(str(self.current_text))
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            report = "=== –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ ===\n\n"
            report += f"üìè –î–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {analysis_result['length']} —Å–∏–º–≤–æ–ª–æ–≤\n"
            report += f"üåç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫: {analysis_result['detected_lang']}\n"
            report += f"‚öôÔ∏è –í—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫: {selected_lang}\n"
            report += f"üéØ –¢–∏–ø –∑–∞–¥–∞—á–∏: {self.cb_task_type.currentText()}\n"
            
            if 'stopword_ratio' in analysis_result and analysis_result['stopword_ratio'] is not None:
                ratio = analysis_result['stopword_ratio']
                report += f"üõë –î–æ–ª—è —Å—Ç–æ–ø-—Å–ª–æ–≤: {ratio:.1%} ({ratio:.4f})\n"
            
            if 'stem_vs_lemma' in analysis_result and analysis_result['stem_vs_lemma'] is not None:
                diff = analysis_result['stem_vs_lemma']['stem_diff']
                total = analysis_result['stem_vs_lemma']['total_words']
                report += f"üî§ –†–∞–∑–ª–∏—á–∏—è —Å—Ç–µ–º–º–∏–Ω–≥–∞/–ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏: {diff} –∏–∑ {total} —Å–ª–æ–≤ ({diff/total:.1%})\n"
            
            report += "\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n"
            for i, rec in enumerate(analysis_result.get('recommendations', []), 1):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º action_ru –≤–º–µ—Å—Ç–æ action
                report += f"{i}. {rec['description']}\n   ‚Üí –î–µ–π—Å—Ç–≤–∏–µ: {rec.get('action_ru', rec['action'])}\n"
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if 'word_stats' in analysis_result:
                stats = analysis_result['word_stats']
                report += "\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                report += f" - –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: {stats['unique_words']}\n"
                report += f" - –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: {stats['avg_word_length']:.2f} —Å–∏–º–≤–æ–ª–æ–≤\n"
                report += f" - –ß–∞—Å—Ç—ã–µ —Å–ª–æ–≤–∞: {', '.join(stats['frequent_words'][:5])}\n"
            
            # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç –≤ –Ω–æ–≤–æ–µ –æ–∫–Ω–æ –∞–Ω–∞–ª–∏–∑–∞
            self.text_analysis_display.setPlainText(report)
            self.log_message("–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞: {str(e)}", error=True)
        finally:
            self.show_progress(False)

    def load_text_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —è–∑—ã–∫–∞"""
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", 
            "", 
            "Text Files (*.txt);;CSV Files (*.csv);;Excel Files (*.xlsx);;JSON Files (*.json);;All Files (*)"
        )
        
        if file_path:
            try:
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç
                self.current_text = None
                
                if file_path.endswith('.txt'):
                    with open(file_path, 'r', encoding='utf-8') as f:
                        self.current_text = f.read()
                
                elif file_path.endswith('.csv'):
                    # –ß–∏—Ç–∞–µ–º CSV, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                    df = pd.read_csv(file_path)
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
                    columns = " | ".join(df.columns)
                    data_rows = []
                    for _, row in df.iterrows():
                        row_str = " | ".join(str(value) for value in row.values)
                        data_rows.append(row_str)
                    
                    self.current_text = f"Columns: {columns}\n\n" + "\n".join(data_rows)
                    
                elif file_path.endswith('.xlsx'):
                    # –ß–∏—Ç–∞–µ–º Excel, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —É–¥–æ–±–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                    df = pd.read_excel(file_path)
                    columns = " | ".join(df.columns)
                    data_rows = []
                    for _, row in df.iterrows():
                        row_str = " | ".join(str(value) for value in row.values)
                        data_rows.append(row_str)
                    
                    self.current_text = f"Columns: {columns}\n\n" + "\n".join(data_rows)
                    
                elif file_path.endswith('.json'):
                    # –ß–∏—Ç–∞–µ–º JSON, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ç–µ–∫—Å—Ç
                    import json  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç json
                    with open(file_path, 'r', encoding='utf-8') as f:
                        data = json.load(f)
                        if isinstance(data, dict):
                            self.current_text = "\n".join(f"{k}: {v}" for k, v in data.items())
                        elif isinstance(data, list):
                            self.current_text = "\n".join(str(item) for item in data)
                        else:
                            self.current_text = str(data)
                
                if self.current_text is not None:
                    self.text_display.setPlainText(self.current_text)
                    self.btn_save.setEnabled(True)
                    self.log_message(f"–¢–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ {file_path}")
                    
                    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
                    self.auto_detect_language()
                    
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}", error=True)

    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        if self.current_data is not None or self.current_text is not None:
            file_path, selected_filter = QFileDialog.getSaveFileName(
                self, 
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", 
                "", 
                "Text Files (*.txt);;CSV Files (*.csv);;Excel Files (*.xlsx);;JSON Files (*.json);;All Files (*)"
            )
            
            if not file_path:
                return
                
            try:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç json –≤ –Ω–∞—á–∞–ª–æ –º–µ—Ç–æ–¥–∞
                import json
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                ext_map = {
                    'Text Files (*.txt)': '.txt',
                    'CSV Files (*.csv)': '.csv',
                    'Excel Files (*.xlsx)': '.xlsx',
                    'JSON Files (*.json)': '.json'
                }
                
                if selected_filter in ext_map and not file_path.endswith(ext_map[selected_filter]):
                    file_path += ext_map[selected_filter]
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–∞–±–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                if self.current_data is not None and file_path.endswith(('.csv', '.xlsx', '.json')):
                    if file_path.endswith('.csv'):
                        self.current_data.to_csv(file_path, index=False, encoding='utf-8')
                    elif file_path.endswith('.xlsx'):
                        self.current_data.to_excel(file_path, index=False)
                    elif file_path.endswith('.json'):
                        self.current_data.to_json(file_path, orient='records', indent=2, force_ascii=False)
                    self.log_message(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {file_path}")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                elif self.current_text is not None:
                    if file_path.endswith('.txt'):
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(self.current_text)
                    elif file_path.endswith('.csv'):
                        # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ CSV
                        lines = [line.strip() for line in self.current_text.split('\n') if line.strip()]
                        pd.DataFrame({'text': lines}).to_csv(file_path, index=False, encoding='utf-8')
                    elif file_path.endswith('.json'):
                        # –ü—ã—Ç–∞–µ–º—Å—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–∞–∫ JSON
                        try:
                            data = json.loads(self.current_text)
                            with open(file_path, 'w', encoding='utf-8') as f:
                                json.dump(data, f, indent=2, ensure_ascii=False)
                        except json.JSONDecodeError:
                            # –ï—Å–ª–∏ –Ω–µ JSON, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç –≤ JSON-—Ñ–æ—Ä–º–∞—Ç–µ
                            with open(file_path, 'w', encoding='utf-8') as f:
                                json.dump({'content': self.current_text}, f, indent=2, ensure_ascii=False)
                    elif file_path.endswith('.xlsx'):
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ Excel (–∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Å—Ç—Ä–æ–∫—É —Ç–∞–±–ª–∏—Ü—ã)
                        lines = [line.strip() for line in self.current_text.split('\n') if line.strip()]
                        pd.DataFrame({'text': lines}).to_excel(file_path, index=False)
                    else:
                        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç
                        with open(file_path, 'w', encoding='utf-8') as f:
                            f.write(self.current_text)
                    
                    self.log_message(f"–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {file_path}")
                    
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}", error=True)


    def display_data(self):
        if self.current_data is not None:
            self.data_table.setRowCount(self.current_data.shape[0])
            self.data_table.setColumnCount(self.current_data.shape[1])
            self.data_table.setHorizontalHeaderLabels(self.current_data.columns)
            
            for row in range(self.current_data.shape[0]):
                for col in range(self.current_data.shape[1]):
                    item = QTableWidgetItem(str(self.current_data.iloc[row, col]))
                    item.setFlags(item.flags() ^ Qt.ItemIsEditable)
                    self.data_table.setItem(row, col, item)

    def clean_data(self):
        if self.current_data is not None:
            try:
                self.show_progress(True)
                processor = CleanData(self.current_data)
                self.current_data = processor.run()
                self.display_data()
                self.save_state()
                self.log_message(processor.info())
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}", error=True)
            finally:
                self.show_progress(False)

    def process_missing(self):
        if self.current_data is not None:
            try:
                self.show_progress(True)
                fill_value = {col: self.le_fill_value.text() 
                             for col in self.current_data.columns}
                
                processor = HandleMissingValues(
                    self.current_data,
                    numeric_strategy=self.cb_num_strategy.currentText(),
                    categorical_strategy=self.cb_cat_strategy.currentText(),
                    fill_value=fill_value
                )
                self.current_data = processor.run()
                self.display_data()
                self.save_state()
                self.log_message(processor.info())
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {str(e)}", error=True)
            finally:
                self.show_progress(False)

    def remove_outliers(self):
        if self.current_data is not None:
            try:
                self.show_progress(True)
                columns = [col.strip() for col in self.le_outlier_cols.text().split(",")] if self.le_outlier_cols.text() else None
                
                processor = DetectAndRemoveOutliers(
                    self.current_data, 
                    columns=columns,
                    method=self.cb_outlier_method.currentText().lower()
                )
                self.current_data = processor.run()
                self.display_data()
                self.save_state()
                self.log_message(processor.info())
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–æ—Å–æ–≤: {str(e)}", error=True)
            finally:
                self.show_progress(False)

    def init_scaling_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –¥–ª—è –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        self.tab_scaling = QWidget()
        layout = QVBoxLayout()
        
        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤
        self.scaling_columns = QLineEdit()
        self.scaling_columns.setPlaceholderText("–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –≤—Å–µ—Ö —á–∏—Å–ª–æ–≤—ã—Ö)")
        
        # –ì—Ä—É–ø–ø–∞ –º–µ—Ç–æ–¥–æ–≤
        self.scaling_method = QButtonGroup()
        self.rb_normalize = QRadioButton("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è (MinMax)")
        self.rb_standardize = QRadioButton("–°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è (Z-score)")
        self.rb_normalize.setChecked(True)
        self.scaling_method.addButton(self.rb_normalize)
        self.scaling_method.addButton(self.rb_standardize)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        self.norm_range_layout = QHBoxLayout()
        self.norm_range_layout.addWidget(QLabel("–î–∏–∞–ø–∞–∑–æ–Ω:"))
        self.norm_min = QLineEdit("0")
        self.norm_max = QLineEdit("1")
        self.norm_min.setValidator(QDoubleValidator())
        self.norm_max.setValidator(QDoubleValidator())
        self.norm_range_layout.addWidget(self.norm_min)
        self.norm_range_layout.addWidget(QLabel("–¥–æ"))
        self.norm_range_layout.addWidget(self.norm_max)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        self.norm_params_container = QWidget()
        self.norm_params_container.setLayout(self.norm_range_layout)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        self.btn_apply_scaling = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –°–±–æ—Ä–∫–∞ layout
        layout.addWidget(QLabel("–°—Ç–æ–ª–±—Ü—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:"))
        layout.addWidget(self.scaling_columns)
        layout.addWidget(QLabel("–ú–µ—Ç–æ–¥:"))
        layout.addWidget(self.rb_normalize)
        layout.addWidget(self.rb_standardize)
        layout.addWidget(self.norm_params_container)
        layout.addWidget(self.btn_apply_scaling)
        layout.addStretch()
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.rb_normalize.toggled.connect(self.norm_params_container.setVisible)
        self.norm_params_container.setVisible(self.rb_normalize.isChecked())
        
        self.tab_scaling.setLayout(layout)
        self.tabs.addTab(self.tab_scaling, "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ")

    def apply_scaling(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.current_data is None:
            self.log_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏", error=True)
            return
            
        try:
            self.show_progress(True)
            columns = [c.strip() for c in self.scaling_columns.text().split(",")] if self.scaling_columns.text() else None
            
            if self.rb_normalize.isChecked():
                processor = NormalizeData(
                    self.current_data,
                    columns=columns,
                    feature_range=(
                        float(self.norm_min.text()),
                        float(self.norm_max.text())
                    ))
            else:
                processor = StandardizeData(
                    self.current_data,
                    columns=columns
                )
                
            self.current_data = processor.run()
            self.display_data()
            self.save_state()
            self.log_message(processor.info())
            
        except ValueError as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {str(e)}", error=True)
        except Exception as e:
            self.log_message(f"–û—à–∏–±–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}", error=True)
        finally:
            self.show_progress(False)

    # –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞

    def run_analysis(self):
        if self.current_data is not None:
            try:
                self.show_progress(True)
                temp_file = "temp_analysis.csv"
                self.current_data.to_csv(temp_file, index=False)
                
                detector = Detector(
                    check_abnormal=True,
                    check_missing=True,
                    check_duplicates=True,
                    check_scaling=True
                )
                outcome, abnormal, scaling = detector.check_dataframe(temp_file)
                
                report = "=== –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö ===\n"
                report += f"–ü—Ä–æ–ø—É—Å–∫–∏: {outcome['Missing values/–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è']}\n"
                report += f"–î—É–±–ª–∏–∫–∞—Ç—ã: {outcome['Duplicate values/–î—É–±–ª–∏–∫–∞—Ç—ã –∑–Ω–∞—á–µ–Ω–∏–π ']}\n\n"
                report += "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é:\n"
                for col, rec in scaling.items():
                    report += f"- {col}: {rec['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è']} ({', '.join(rec['–ø—Ä–∏—á–∏–Ω–∞'])})\n"
                
                self.analysis_report.setPlainText(report)
                self.plot_distribution()
                self.log_message("–ê–≤—Ç–æ–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω")
                
            except Exception as e:
                self.log_message(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}", error=True)
            finally:
                self.show_progress(False)

    def plot_distribution(self):
        if self.current_data is not None:
            self.figure.clear()
            ax = self.figure.add_subplot(111)
            
            numeric_cols = self.current_data.select_dtypes(include=['number']).columns
            if len(numeric_cols) > 0:
                col = numeric_cols[0]
                self.current_data[col].plot(kind='hist', ax=ax)
                ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {col}")
                self.canvas.draw()

    # –°–∏—Å—Ç–µ–º–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –¥—Ä—É–≥–∏–µ —É—Ç–∏–ª–∏—Ç—ã

    def save_state(self):
        if self.current_data is not None:
            self.history.append(self.current_data.copy())
            if len(self.history) > 10:
                self.history.pop(0)

    def undo(self):
        if len(self.history) > 1:
            self.history.pop()
            self.current_data = self.history[-1].copy()
            self.display_data()
            self.log_message("–û—Ç–º–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")

    def export_report(self):
        path, _ = QFileDialog.getSaveFileName(self, "–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–∞", "", "PDF Files (*.pdf)")
        if path:
            printer = QPrinter(QPrinter.HighResolution)
            printer.setOutputFormat(QPrinter.PdfFormat)
            printer.setOutputFileName(path)
            
            doc = QTextDocument()
            doc.setPlainText(self.analysis_report.toPlainText())
            doc.print_(printer)
            self.log_message(f"–û—Ç—á—ë—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ {path}")

    def show_progress(self, visible):
        self.progress_bar.setVisible(visible)
        self.progress_bar.setRange(0, 0 if visible else 1)  # –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
        QApplication.processEvents()

    def log_message(self, message, error=False):
        if error:
            self.log.append(f"<font color='red'>{message}</font>")
        else:
            self.log.append(message)


if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
    app.setStyle('Fusion')
    
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
    palette = QPalette()
    palette.setColor(QPalette.Window, QColor(240, 240, 240))
    palette.setColor(QPalette.WindowText, QColor(0, 0, 0))
    palette.setColor(QPalette.Base, QColor(255, 255, 255))
    palette.setColor(QPalette.AlternateBase, QColor(245, 245, 245))
    palette.setColor(QPalette.ToolTipBase, Qt.white)
    palette.setColor(QPalette.ToolTipText, Qt.black)
    palette.setColor(QPalette.Text, Qt.black)
    palette.setColor(QPalette.Button, QColor(240, 240, 240))
    palette.setColor(QPalette.ButtonText, Qt.black)
    palette.setColor(QPalette.BrightText, Qt.red)
    palette.setColor(QPalette.Highlight, QColor(70, 130, 180))
    palette.setColor(QPalette.HighlightedText, Qt.white)
    app.setPalette(palette)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
    font = QFont("Segoe UI", 9)
    app.setFont(font)
    
    window = DataProcessingApp()
    window.show()
    sys.exit(app.exec_())

